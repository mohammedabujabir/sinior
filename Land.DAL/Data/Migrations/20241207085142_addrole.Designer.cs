// <auto-generated />
using System;
using Land.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Land.PL.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241207085142_addrole")]
    partial class addrole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Land.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3a36d40f-a6a5-4bb4-830f-f6a0719ec155",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ee13a1d-d971-4a18-bafe-c6d375126b6d",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENkcDpV7z9Uy+g+m91kSHqhh2VHsSI6yBaNrRtgYi6YWFjeAT7KMR1u/D8TQzGq4VA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7597c51-de4c-4b41-9a3d-6a542a4c0181",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "fb714de1-c2f3-4fff-abe8-e3a5a8e1f56b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f96c92bb-a5b0-45f5-a44a-551bdf69e276",
                            Email = "citizen@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITIZEN@GMAIL.COM",
                            NormalizedUserName = "CITIZEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAf7vWkXCLeI2JpAOdyh3NQQCS5yw5MWZnNe2MPeqEo0dSNY6h7gAKMMCV9t0x3CGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00717abb-8bf5-4906-8c79-b9ee6e8f8c9e",
                            TwoFactorEnabled = false,
                            UserName = "citizen"
                        },
                        new
                        {
                            Id = "6d9aa857-1fe0-4e64-94b4-cb597f5b5d25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd5e108e-0339-406c-b083-b480be14b0fb",
                            Email = "policeman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "POLICEMAN@GMAIL.COM",
                            NormalizedUserName = "POLICEMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOFaHNuO7uF1ryCh6w0RHqrRpI5KS/jssMkhr3hMecJnj20V8HchfKBtbAfZlha/RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed183b29-45f3-48fd-8d1c-6be05a0ccab3",
                            TwoFactorEnabled = false,
                            UserName = "policeman"
                        },
                        new
                        {
                            Id = "6bcde9d8-74f1-4235-9aba-41f51ecad291",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8de2d324-1d42-456e-825b-aa0a6610bb03",
                            Email = "judged@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUDGED@GMAIL.COM",
                            NormalizedUserName = "JUDGED",
                            PasswordHash = "AQAAAAIAAYagAAAAENP00zRc0n+TyZz3/kojpWDrBxQPhlFAWwF4G0/VJbuty4jN4cJ9mN7+wP2mcmuCig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "801e5de1-05ef-4355-86df-4d0a9b394c77",
                            TwoFactorEnabled = false,
                            UserName = "judged"
                        });
                });

            modelBuilder.Entity("Land.DAL.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Land.DAL.Models.Citizen", b =>
                {
                    b.Property<int>("CitizenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitizenId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Camera_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CitizenId");

                    b.ToTable("Citizens");
                });

            modelBuilder.Entity("Land.DAL.Models.Court", b =>
                {
                    b.Property<int>("CourtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourtId");

                    b.ToTable("Court");
                });

            modelBuilder.Entity("Land.DAL.Models.CourtDecisions", b =>
                {
                    b.Property<int>("CourtDecisionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtDecisionsId"));

                    b.Property<int>("Courtid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JudgeId")
                        .HasColumnType("int");

                    b.Property<string>("Penalty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoliceDecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Verdict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("CourtDecisionsId");

                    b.HasIndex("Courtid");

                    b.HasIndex("JudgeId");

                    b.HasIndex("PoliceDecisionId")
                        .IsUnique()
                        .HasFilter("[PoliceDecisionId] IS NOT NULL");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("CourtDecisions");
                });

            modelBuilder.Entity("Land.DAL.Models.Judge", b =>
                {
                    b.Property<int>("JudgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JudgeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JudgeId");

                    b.ToTable("Judge");
                });

            modelBuilder.Entity("Land.DAL.Models.Policeman", b =>
                {
                    b.Property<int>("PolicemanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicemanId"));

                    b.Property<string>("Badge_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PolicemanId");

                    b.ToTable("Policeman");
                });

            modelBuilder.Entity("Land.DAL.Models.PolicemanDecision", b =>
                {
                    b.Property<int>("PolicemanDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Policemanid")
                        .HasColumnType("int");

                    b.Property<bool>("ReferredToCourt")
                        .HasColumnType("bit");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("PolicemanDecisionId");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("PolicemanDecision");
                });

            modelBuilder.Entity("Land.DAL.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Land.DAL.Models.TrafficViolation", b =>
                {
                    b.Property<int>("TrafficViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrafficViolationId"));

                    b.Property<string>("Car_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Reported_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrafficViolationId");

                    b.HasIndex("CitizenId");

                    b.ToTable("TrafficViolation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80a3acc5-66d9-4796-bbe0-089838b7ab65",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3c549232-4527-4ce5-90c5-db969bbb0ae6",
                            Name = "Citizen",
                            NormalizedName = "CITIZEN"
                        },
                        new
                        {
                            Id = "b6100b13-e19c-4823-823e-cd3b561f8da4",
                            Name = "Policeman",
                            NormalizedName = "POLICEMAN"
                        },
                        new
                        {
                            Id = "78aaaa40-7097-4027-b9c9-b492038131b2",
                            Name = "judged",
                            NormalizedName = "JUDGED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3a36d40f-a6a5-4bb4-830f-f6a0719ec155",
                            RoleId = "80a3acc5-66d9-4796-bbe0-089838b7ab65"
                        },
                        new
                        {
                            UserId = "6d9aa857-1fe0-4e64-94b4-cb597f5b5d25",
                            RoleId = "b6100b13-e19c-4823-823e-cd3b561f8da4"
                        },
                        new
                        {
                            UserId = "fb714de1-c2f3-4fff-abe8-e3a5a8e1f56b",
                            RoleId = "3c549232-4527-4ce5-90c5-db969bbb0ae6"
                        },
                        new
                        {
                            UserId = "6bcde9d8-74f1-4235-9aba-41f51ecad291",
                            RoleId = "78aaaa40-7097-4027-b9c9-b492038131b2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Land.DAL.Models.Car", b =>
                {
                    b.HasOne("Land.DAL.Models.Citizen", "Citizen")
                        .WithMany("Cars")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Land.DAL.Models.CourtDecisions", b =>
                {
                    b.HasOne("Land.DAL.Models.Court", "Court")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("Courtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Land.DAL.Models.Judge", "Judge")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Land.DAL.Models.PolicemanDecision", "PoliceDecision")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Land.DAL.Models.CourtDecisions", "PoliceDecisionId");

                    b.HasOne("Land.DAL.Models.TrafficViolation", "ViolationStatus")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Land.DAL.Models.CourtDecisions", "Violationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("Judge");

                    b.Navigation("PoliceDecision");

                    b.Navigation("ViolationStatus");
                });

            modelBuilder.Entity("Land.DAL.Models.PolicemanDecision", b =>
                {
                    b.HasOne("Land.DAL.Models.Policeman", "Policeman")
                        .WithMany("Decisions")
                        .HasForeignKey("PolicemanDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Land.DAL.Models.TrafficViolation", "TrafficViolation")
                        .WithOne("Decision")
                        .HasForeignKey("Land.DAL.Models.PolicemanDecision", "Violationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policeman");

                    b.Navigation("TrafficViolation");
                });

            modelBuilder.Entity("Land.DAL.Models.TrafficViolation", b =>
                {
                    b.HasOne("Land.DAL.Models.Citizen", "Citizen")
                        .WithMany("TrafficViolations")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Land.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Land.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Land.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Land.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Land.DAL.Models.Citizen", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("TrafficViolations");
                });

            modelBuilder.Entity("Land.DAL.Models.Court", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Land.DAL.Models.Judge", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Land.DAL.Models.Policeman", b =>
                {
                    b.Navigation("Decisions");
                });

            modelBuilder.Entity("Land.DAL.Models.PolicemanDecision", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();
                });

            modelBuilder.Entity("Land.DAL.Models.TrafficViolation", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();

                    b.Navigation("Decision")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
