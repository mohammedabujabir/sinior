// <auto-generated />
using System;
using Land.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Land.PL.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Land.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Camera_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "624d139e-75ba-4330-9ee0-339e3e06332a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75827f70-1f93-45df-a82a-0eb11795ba26",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDnftB/sD9z5wAjET1wQRYXYAg+rDqj97Nau9XiqbYS2EtRDqvMVL9I1Ac2ZfMth9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28c1d05e-e3fa-4687-b997-0ca328980beb",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "6230ed47-5fd6-467c-b3ac-8ddd795ff89f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d5456d9-fa14-4c0b-84f4-5ed2d2666ced",
                            Email = "citizen@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITIZEN@GMAIL.COM",
                            NormalizedUserName = "CITIZEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3TGa8T9Q1p7KICf/0FhI0I+3YApNwZFVoRz/cjK5qRUUo/bGlUFzZHc7WvJZcr4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1c6a436-530a-478b-81e0-41cca85b87e7",
                            TwoFactorEnabled = false,
                            UserName = "citizen"
                        },
                        new
                        {
                            Id = "e9751544-fb03-4795-ada9-caa323ee788d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a37d68b4-384d-4921-80a1-752bb0c62303",
                            Email = "policeman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "POLICEMAN@GMAIL.COM",
                            NormalizedUserName = "POLICEMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEM80W0KY3uyX+SgvZAh2JMnru8LSeKjmeoCtDwUuXoCZ86cH1Ba+/AgQkTEQ3EmhJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8aedc6f2-a8d1-4227-8a7d-3a58db55308e",
                            TwoFactorEnabled = false,
                            UserName = "policeman"
                        },
                        new
                        {
                            Id = "daac9f27-2781-42b2-b01d-905edc48eb2f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be4ac1b8-0db1-4318-a141-987b4557cb53",
                            Email = "judged@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUDGED@GMAIL.COM",
                            NormalizedUserName = "JUDGED",
                            PasswordHash = "AQAAAAIAAYagAAAAEKCUvFVxSwMj81ETa4hEhrMxQWg3t7RAUmYhU1/U8IwJM4Ircq2WRmmiGMpC1Uexhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "593a7bc6-4b1c-45fe-8dc5-d3a2ebd3563d",
                            TwoFactorEnabled = false,
                            UserName = "judged"
                        });
                });

            modelBuilder.Entity("Land.DAL.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Land.DAL.Models.Citizen", b =>
                {
                    b.Property<int>("CitizenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitizenId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Camera_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CitizenId");

                    b.ToTable("Citizens");
                });

            modelBuilder.Entity("Land.DAL.Models.Court", b =>
                {
                    b.Property<int>("CourtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourtId");

                    b.ToTable("Court");
                });

            modelBuilder.Entity("Land.DAL.Models.CourtDecisions", b =>
                {
                    b.Property<int>("CourtDecisionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtDecisionsId"));

                    b.Property<int>("Courtid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JudgeId")
                        .HasColumnType("int");

                    b.Property<string>("Penalty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoliceDecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Verdict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("CourtDecisionsId");

                    b.HasIndex("Courtid");

                    b.HasIndex("JudgeId");

                    b.HasIndex("PoliceDecisionId")
                        .IsUnique()
                        .HasFilter("[PoliceDecisionId] IS NOT NULL");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("CourtDecisions");
                });

            modelBuilder.Entity("Land.DAL.Models.Judge", b =>
                {
                    b.Property<int>("JudgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JudgeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JudgeId");

                    b.ToTable("Judge");
                });

            modelBuilder.Entity("Land.DAL.Models.Policeman", b =>
                {
                    b.Property<int>("PolicemanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicemanId"));

                    b.Property<string>("Badge_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PolicemanId");

                    b.ToTable("Policeman");
                });

            modelBuilder.Entity("Land.DAL.Models.PolicemanDecision", b =>
                {
                    b.Property<int>("PolicemanDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Policemanid")
                        .HasColumnType("int");

                    b.Property<bool>("ReferredToCourt")
                        .HasColumnType("bit");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("PolicemanDecisionId");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("PolicemanDecision");
                });

            modelBuilder.Entity("Land.DAL.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Land.DAL.Models.TrafficViolation", b =>
                {
                    b.Property<int>("TrafficViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrafficViolationId"));

                    b.Property<string>("Car_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Reported_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrafficViolationId");

                    b.HasIndex("CitizenId");

                    b.ToTable("TrafficViolation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cf9f0790-9498-4aa2-be79-72f53860ea69",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5d98a14e-10ca-45d6-9e47-18e49a131790",
                            Name = "Citizen",
                            NormalizedName = "CITIZEN"
                        },
                        new
                        {
                            Id = "1a1ff46f-59db-4df0-8abf-69f90ddbb0b7",
                            Name = "Policeman",
                            NormalizedName = "POLICEMAN"
                        },
                        new
                        {
                            Id = "f71aa82b-27c9-47ad-88cf-bcf1dc3c3ec1",
                            Name = "judged",
                            NormalizedName = "JUDGED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "624d139e-75ba-4330-9ee0-339e3e06332a",
                            RoleId = "cf9f0790-9498-4aa2-be79-72f53860ea69"
                        },
                        new
                        {
                            UserId = "e9751544-fb03-4795-ada9-caa323ee788d",
                            RoleId = "1a1ff46f-59db-4df0-8abf-69f90ddbb0b7"
                        },
                        new
                        {
                            UserId = "6230ed47-5fd6-467c-b3ac-8ddd795ff89f",
                            RoleId = "5d98a14e-10ca-45d6-9e47-18e49a131790"
                        },
                        new
                        {
                            UserId = "daac9f27-2781-42b2-b01d-905edc48eb2f",
                            RoleId = "f71aa82b-27c9-47ad-88cf-bcf1dc3c3ec1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Land.DAL.Models.Car", b =>
                {
                    b.HasOne("Land.DAL.Models.Citizen", "Citizen")
                        .WithMany("Cars")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Land.DAL.Models.CourtDecisions", b =>
                {
                    b.HasOne("Land.DAL.Models.Court", "Court")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("Courtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Land.DAL.Models.Judge", "Judge")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Land.DAL.Models.PolicemanDecision", "PoliceDecision")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Land.DAL.Models.CourtDecisions", "PoliceDecisionId");

                    b.HasOne("Land.DAL.Models.TrafficViolation", "ViolationStatus")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Land.DAL.Models.CourtDecisions", "Violationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("Judge");

                    b.Navigation("PoliceDecision");

                    b.Navigation("ViolationStatus");
                });

            modelBuilder.Entity("Land.DAL.Models.PolicemanDecision", b =>
                {
                    b.HasOne("Land.DAL.Models.Policeman", "Policeman")
                        .WithMany("Decisions")
                        .HasForeignKey("PolicemanDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Land.DAL.Models.TrafficViolation", "TrafficViolation")
                        .WithOne("Decision")
                        .HasForeignKey("Land.DAL.Models.PolicemanDecision", "Violationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policeman");

                    b.Navigation("TrafficViolation");
                });

            modelBuilder.Entity("Land.DAL.Models.TrafficViolation", b =>
                {
                    b.HasOne("Land.DAL.Models.Citizen", "Citizen")
                        .WithMany("TrafficViolations")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Land.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Land.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Land.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Land.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Land.DAL.Models.Citizen", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("TrafficViolations");
                });

            modelBuilder.Entity("Land.DAL.Models.Court", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Land.DAL.Models.Judge", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Land.DAL.Models.Policeman", b =>
                {
                    b.Navigation("Decisions");
                });

            modelBuilder.Entity("Land.DAL.Models.PolicemanDecision", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();
                });

            modelBuilder.Entity("Land.DAL.Models.TrafficViolation", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();

                    b.Navigation("Decision")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
